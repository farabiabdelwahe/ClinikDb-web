rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function userDoc() { return get(/databases/$(database)/documents/users/$(request.auth.uid)); }
    function isAdmin() { return isSignedIn() && userDoc().data.role == 'admin'; }
    function isAgent() { return isSignedIn() && userDoc().data.role == 'agent'; }

    // Admins can do anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // Users can manage their profile; admins can manage any profile
    match /users/{userId} {
      allow read: if isAdmin()
        || (isSignedIn() && (
          request.auth.uid == userId ||
          (resource.data.email != null && resource.data.email == request.auth.token.email)
        ));
      allow create, update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == userId);
    }

    match /admins/{adminId} {
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.userId);
      allow write: if isAdmin();
    }

    match /agents/{agentId} {
      allow read: if isAdmin()
        || (isSignedIn() && (
          (resource.data.userId != null && resource.data.userId == request.auth.uid) ||
          (resource.data.email != null && resource.data.email == request.auth.token.email)
        ));
      allow write: if isAdmin();
    }

    // Agents limited reads
    match /promocodes/{code} {
      allow read: if isAgent() && resource.data.assigned_agent_id == request.auth.uid;
    }

    match /agent_promocode_commissions/{id} {
      allow read: if isAgent() && resource.data.agent_id == request.auth.uid;
      // only CF/admins write
      allow create, update, delete: if false;
    }

    // Public signup may create subscription documents, but with strict validation in CF
    match /subscriptions/{id} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
